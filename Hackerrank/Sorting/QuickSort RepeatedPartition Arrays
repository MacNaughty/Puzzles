import java.util.*;

public class Solution {

    public static void printListOnLine(int[] list) {
        for (int i = 0; i < list.length; i++) {
            System.out.print(list[i] + " ");
        }
        System.out.println();
    }

    public static void rebuildAndPrintAll(int[] less, int middle, int[] more) {
        int[] newArray = new int[1 + less.length + more.length];
        for (int i = 0; i < less.length; i++) {
            newArray[i] = less[i];
        }
        newArray[less.length] = middle;
        for (int i = less.length + 1, j = 0; j < more.length; i++, j++) {
            newArray[i] = more[j];
        }
        printListOnLine(newArray);
    }

    public static void rebuildOneAndPrint(int[] array, int middle) {
        int[] newArray = new int[array.length + 1];
        if (middle > array[0]) {
            for (int i = 0; i < array.length; i++) {
                newArray[i] = array[i];
            } 
            newArray[newArray.length - 1] = middle;
        } else {
            newArray[0] = middle;
            for (int i = 1; i < array.length; i++) {
                newArray[i] = array[i - 1];
            }
        }
        printListOnLine(newArray);
    }

    public static void quickSortPartitionArrays(int[] a) {
        int middle = 1001;
        if (a.length > 0) {
            middle = a[0];
            int countLess = 0;
            int countMore = 0;

            // obtain length of the two subArrays
            for (int i = 1; i < a.length; i++) {
                if (a[i] > middle) {
                    countMore++;
                } else {
                    countLess++;
                }
            }

            // build and populate the subArrays
            int[] more = new int[countMore];
            int tempJMore = 0;
            int[] less = new int[countLess];
            int tempJLess = 0;
            for (int i = 1; i < a.length; i++) {
                if (a[i] > middle) {
                    more[tempJMore] = a[i];
                    tempJMore++;
                } else {
                    less[tempJLess] = a[i];
                    tempJLess++;
                }
            }

            // recursion
            if (less.length > 1) {
                quickSortPartitionArrays(less);
            } else if (more.length > 1) {
                quickSortPartitionArrays(more);
            }

            // rebuild and print
            if ((less.length == 1) && (more.length == 1)) {
                rebuildAndPrintAll(less, middle, more);
            }
            if (less.length == 1) {
                rebuildOneAndPrint(less, middle);
            }
            if (more.length == 1) {
                rebuildOneAndPrint(more, middle);
            }

        }
    }


    static int[] comparison;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int s = sc.nextInt();
        int[] array = new int[s];
        comparison = new int[s];


        for (int i = 0; i < s; i++) {
            array[i] = sc.nextInt();
            comparison[i] = 0;
        }

        quickSortPartitionArrays(array);
    }
}
